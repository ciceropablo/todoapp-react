{"version":3,"sources":["redux/reducers/toDos.js","redux/actions/actionTypes.js","redux/reducers/index.js","redux/store/index.js","localStorage.js","containers/ToDoForm/ToDoForm.js","redux/actions/index.js","containers/ToDoListItem/ToDoListItem.js","messages.js","containers/ToDoList/ToDoList.js","components/ToDoApp/ToDoApp.js","serviceWorker.js","index.js"],"names":["initialState","toDos","state","action","type","Object","assign","payload","id","filter","toDo","checked","find","rootReducer","combineReducers","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","subscribe","stringify","setItem","saveState","getState","ToDoForm","props","value","handleChange","bind","handleSubmit","e","target","this","setState","preventDefault","addToDo","className","method","onSubmit","onChange","React","Component","connect","description","Date","now","ToDoListItem","item","handleClick","checkToDo","window","confirm","removeToDo","status","getModifierClass","htmlFor","onClick","ToDoList","toDoItems","map","key","length","ToDoApp","Boolean","location","hostname","match","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db76e76e.chunk.js","sourcesContent":["import { ADD_TODO, REMOVE_TODO, CHECK_TODO } from '../actions/actionTypes';\n\nconst initialState = {\n  toDos: []\n};\n\nfunction toDos(state = initialState, action) {\n  switch (action.type) {\n    case ADD_TODO: {\n      return Object.assign({}, state, {\n        toDos: [...state.toDos, action.payload]\n      });\n    }\n\n    case REMOVE_TODO: {\n      const id = action.payload.id;\n\n      return Object.assign({}, state, {\n        toDos: [...state.toDos.filter(toDo => toDo.id !== id)]\n      });\n    }\n\n    case CHECK_TODO: {\n      const id = action.payload.id;\n      const checked = action.payload.checked;\n\n      const toDo = state.toDos.find(toDo => toDo.id === id);\n      toDo.checked = checked;\n\n      return Object.assign({}, state, {\n        toDos: [...state.toDos]\n      });\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport default toDos;\n","export const ADD_TODO = 'ADD_TODO';\nexport const REMOVE_TODO = 'REMOVE_TODO';\nexport const CHECK_TODO = 'CHECK_TODO';\n","import { combineReducers } from 'redux';\nimport toDos from './toDos';\n\nconst rootReducer = combineReducers({\n  toDos\n});\n\nexport default rootReducer;\n","import { createStore } from 'redux';\nimport rootReducer from '../reducers';\n\nimport { loadState, saveState } from '../../localStorage';\n\nconst persistedState = loadState();\nconst store = createStore(rootReducer, persistedState);\n\nstore.subscribe(() => {\n  saveState({\n    toDos: store.getState().toDos\n  });\n});\n\nexport default store;\n","const KEY = 'ToDoApp';\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(KEY);\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(KEY, serializedState);\n  } catch (err) {\n    // Ignore write errors;\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addToDo } from '../../redux/actions';\n\nimport './ToDoForm.css';\n\nclass ToDoForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    const value = e.target.value;\n    this.setState({ value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.addToDo(this.state.value);\n    this.setState(() => ({ value: '' }));\n  }\n\n  render() {\n    return (\n      <form className=\"ToDoForm\" method=\"POST\" onSubmit={this.handleSubmit}>\n        <input\n          className=\"ToDoForm__input\"\n          type=\"text\"\n          onChange={this.handleChange}\n          value={this.state.value}\n        />\n      </form>\n    );\n  }\n}\n\nToDoForm.propTypes = {\n  addToDo: PropTypes.func.isRequired\n};\n\nexport default connect(\n  null,\n  { addToDo }\n)(ToDoForm);\n","import { ADD_TODO, REMOVE_TODO, CHECK_TODO } from './actionTypes';\n\nexport const addToDo = description => ({\n  type: ADD_TODO,\n  payload: {\n    id: `todo-${Date.now()}`,\n    checked: false,\n    description\n  }\n});\n\nexport const removeToDo = id => ({\n  type: REMOVE_TODO,\n  payload: {\n    id\n  }\n});\n\nexport const checkToDo = (id, checked) => ({\n  type: CHECK_TODO,\n  payload: {\n    id,\n    checked\n  }\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { removeToDo, checkToDo } from '../../redux/actions';\n\nimport { CONFIRMATION } from '../../messages';\nimport './ToDoListItem.css';\n\nclass ToDoListItem extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const checked = this.props.item.checked;\n    this.state = { checked };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange(e) {\n    const checked = e.target.checked;\n    const id = this.props.item.id;\n    this.setState({ checked });\n    this.props.checkToDo(id, checked);\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    const confirmation = window.confirm(CONFIRMATION);\n    if (confirmation) {\n      const id = this.props.item.id;\n      this.props.removeToDo(id);\n    }\n  }\n\n  getModifierClass(status) {\n    return status ? 'ToDoListItem__label--strikethrough' : '';\n  }\n\n  render() {\n    const id = this.props.item.id;\n    const checked = this.props.item.checked;\n    const description = this.props.item.description;\n\n    return (\n      <li className=\"ToDoListItem\">\n        <input\n          className=\"ToDoListItem__checkbox\"\n          type=\"checkbox\"\n          id={id}\n          onChange={this.handleChange}\n          checked={this.state.checked}\n        />\n\n        <label\n          className={`ToDoListItem__label ${this.getModifierClass(checked)}`}\n          htmlFor={id}\n        >\n          {description}\n        </label>\n\n        <button\n          className=\"ToDoListItem__button ToDoListItem__confirmation-button\"\n          onClick={this.handleClick}\n        >\n          &#10005;\n        </button>\n      </li>\n    );\n  }\n}\n\nToDoListItem.propTypes = {\n  item: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    checked: PropTypes.bool.isRequired,\n    description: PropTypes.string.isRequired\n  }).isRequired,\n  removeToDo: PropTypes.func.isRequired,\n  checkToDo: PropTypes.func.isRequired\n};\n\nexport default connect(\n  null,\n  { removeToDo, checkToDo }\n)(ToDoListItem);\n","export const CONFIRMATION = 'Are you sure?';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport ToDoListItem from '../../containers/ToDoListItem/ToDoListItem';\nimport './ToDoList.css';\n\nclass ToDoList extends React.Component {\n  render() {\n    const toDoItems = this.props.toDos.map(item => {\n      return <ToDoListItem key={item.id} item={item} />;\n    });\n\n    return toDoItems.length > 0 ? (\n      <ul className=\"ToDoList\">{toDoItems}</ul>\n    ) : null;\n  }\n}\n\nToDoList.propTypes = {\n  toDos: PropTypes.array.isRequired\n};\n\nexport default connect(state => state.toDos)(ToDoList);\n","import React from 'react';\n\nimport ToDoForm from '../../containers/ToDoForm/ToDoForm';\nimport ToDoList from '../../containers/ToDoList/ToDoList';\nimport './ToDoApp.css';\n\nconst ToDoApp = () => (\n  <div className=\"ToDoApp\">\n    <header>\n      <h1>ToDoApp-React</h1>\n      <ToDoForm />\n    </header>\n    <ToDoList />\n  </div>\n);\n\nexport default ToDoApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport ToDoApp from './components/ToDoApp/ToDoApp';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={ToDoApp} />\n      </div>\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}